name: Claude Code - Build S3 Super MCP Server

on:
  workflow_dispatch:
    inputs:
      build_instruction:
        description: 'Instruction for Claude Code'
        required: true
        default: 'Build the complete S3 Super MCP Server according to the specification'
        type: string
      target_branch:
        description: 'Target branch for changes'
        required: true
        default: 'claude-code/implementation'
        type: string

permissions:
  contents: write
  pull-requests: write
  actions: write

jobs:
  setup-environment:
    runs-on: ubuntu-latest
    outputs:
      claude-ready: ${{ steps.verify.outputs.ready }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Verify Claude Code Prerequisites
        id: verify
        run: |
          echo "Verifying environment for Claude Code..."
          
          # Check if specification exists
          if [ ! -f "SPECIFICATION.md" ]; then
            echo "❌ SPECIFICATION.md not found"
            echo "Creating placeholder for Claude Code to use..."
            echo "# S3 Super MCP Server Specification" > SPECIFICATION.md
            echo "See the complete specification in the repository." >> SPECIFICATION.md
          fi
          
          # Check project structure
          mkdir -p src tests scripts layers/super-binary .devcontainer
          
          # Create requirements files if they don't exist
          if [ ! -f "requirements.txt" ]; then
            cat > requirements.txt << EOF
          mcp>=1.0.0
          boto3>=1.34.0
          botocore>=1.34.0
          aws-lambda-powertools>=2.30.0
          pydantic>=2.5.0
          asyncio-throttle>=1.0.2
          python-dateutil>=2.8.2
          EOF
          fi
          
          if [ ! -f "requirements-dev.txt" ]; then
            cat > requirements-dev.txt << EOF
          pytest>=7.4.0
          pytest-asyncio>=0.21.0
          pytest-cov>=4.1.0
          moto>=4.2.0
          black>=23.7.0
          ruff>=0.0.287
          mypy>=1.5.0
          EOF
          fi
          
          echo "ready=true" >> $GITHUB_OUTPUT

      - name: Commit setup changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          if [ -n "$(git status --porcelain)" ]; then
            git add .
            git commit -m "🤖 Prepare environment for Claude Code"
            git push
          fi

  claude-code-build:
    needs: setup-environment
    runs-on: ubuntu-latest
    if: needs.setup-environment.outputs.claude-ready == 'true'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Create Claude Code branch
        run: |
          git checkout -b ${{ github.event.inputs.target_branch }} || git checkout ${{ github.event.inputs.target_branch }}
          git push -u origin ${{ github.event.inputs.target_branch }} || true

      - name: Set up Python environment
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: Install Super library
        run: |
          cd /tmp
          wget -q https://github.com/brimdata/super/releases/latest/download/super-linux-amd64.tar.gz
          tar -xzf super-linux-amd64.tar.gz
          sudo mv super-linux-amd64/super /usr/local/bin/
          sudo chmod +x /usr/local/bin/super
          super --version

      - name: Install AWS SAM CLI
        run: |
          curl -L -o sam-cli.zip https://github.com/aws/aws-sam-cli/releases/latest/download/aws-sam-cli-linux-x86_64.zip
          unzip -q sam-cli.zip -d sam-installation
          sudo ./sam-installation/install
          sam --version

      - name: Create Claude Code instruction file
        run: |
          cat > .claude-code-instruction.md << 'EOF'
          # Claude Code Build Instructions

          ## Project: S3 Super MCP Server

          ### Build Goal:
          ${{ github.event.inputs.build_instruction }}

          ### Complete Implementation Required:
          
          Build a production-ready MCP server that enables LLMs to perform Business Intelligence analytics on S3 data using the super library.

          ### Implementation Requirements:

          #### 1. Core MCP Server (src/mcp_server.py)
          - Implement all 5 MCP tools: smart_query, explore_data, business_metrics, cross_dataset_join, data_quality_check
          - Handle MCP protocol compliance with proper error handling
          - Support natural language to SuperSQL conversion

          #### 2. Super Integration (src/super_executor.py)
          - Direct interface to super binary at /usr/local/bin/super
          - Execute SuperSQL queries against S3 URLs
          - Handle timeouts, errors, and result parsing

          #### 3. Query Processor (src/query_processor.py)
          - Parse natural language business requests
          - Convert to optimized SuperSQL using pattern matching
          - Support 20+ common BI query patterns

          #### 4. Business Metrics (src/business_metrics.py)
          - Pre-built templates for revenue analysis, customer LTV, churn analysis
          - Execute standard business calculations
          - Support parameterized metric calculations

          #### 5. AWS Lambda Handler (src/handler.py)
          - Lambda entry point with PowerTools integration
          - HTTP request handling for Function URLs
          - Proper error handling and logging

          #### 6. Deployment Configuration
          - Complete SAM template (template.yaml) for AWS deployment
          - Layer configuration for super binary
          - IAM roles and policies for S3 access

          #### 7. Comprehensive Tests
          - Integration tests with real S3 data scenarios
          - MCP protocol compliance tests
          - Business query scenario tests

          ### File Structure to Create:
          ```
          src/
          ├── __init__.py
          ├── handler.py                    # Lambda entry point
          ├── mcp_server.py                 # Main MCP server
          ├── query_processor.py            # Natural language processing
          ├── super_executor.py             # Super library interface
          ├── business_metrics.py           # BI templates
          ├── schema_analyzer.py            # Data discovery
          └── utils/
              ├── __init__.py
              ├── aws_helpers.py
              └── logging_config.py

          tests/
          ├── __init__.py
          ├── create_test_data.py           # Generate S3 test data
          ├── test_integration.py           # End-to-end scenarios
          ├── test_mcp_server.py           # MCP compliance
          ├── test_query_processor.py       # Query parsing
          └── test_super_executor.py        # Super integration

          layers/super-binary/Makefile      # Layer build script
          template.yaml                     # SAM deployment
          pyproject.toml                    # Python project config
          ```

          ### Success Criteria:
          1. All MCP tools functional and tested
          2. Natural language queries work for common business scenarios
          3. SuperSQL execution against S3 data works
          4. AWS Lambda deployment configuration complete
          5. Comprehensive test suite with 90%+ coverage

          ### Important Notes:
          - Super binary is available at /usr/local/bin/super
          - All dependencies are installed in the environment
          - Focus on production-ready, well-tested code
          - Include comprehensive error handling
          - Use the complete specification as reference for implementation details

          ### Build Command:
          After implementation, run:
          ```bash
          # Run tests
          pytest tests/ -v --cov=src

          # Build SAM application
          sam build

          # Validate deployment template
          sam validate
          ```

          Start implementation now. Build the complete, production-ready S3 Super MCP Server.
          EOF

      - name: Trigger Claude Code Build
        run: |
          echo "🤖 Environment prepared for Claude Code"
          echo "📋 Instruction file created: .claude-code-instruction.md"
          echo "🎯 Ready for Claude Code to build the complete S3 Super MCP Server"
          echo ""
          echo "Next steps for Claude Code:"
          echo "1. Read .claude-code-instruction.md for complete build requirements"
          echo "2. Implement all components according to the specification"
          echo "3. Create comprehensive tests"
          echo "4. Ensure production readiness"
          echo ""
          echo "Repository structure prepared:"
          find . -type f -name "*.py" -o -name "*.yaml" -o -name "*.yml" -o -name "*.toml" -o -name "*.md" | sort

      - name: Commit preparation
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action - Claude Code Prep"
          
          git add .
          git commit -m "🤖 Prepare repository for Claude Code implementation

          - Set up complete project structure
          - Added Claude Code instruction file
          - Configured development environment
          - Ready for complete S3 Super MCP Server implementation"
          git push origin ${{ github.event.inputs.target_branch }}

  post-build-validation:
    needs: claude-code-build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout built code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.target_branch }}

      - name: Set up validation environment
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt || echo "No requirements.txt found"
          pip install -r requirements-dev.txt || echo "No requirements-dev.txt found"

      - name: Install Super library
        run: |
          cd /tmp
          wget -q https://github.com/brimdata/super/releases/latest/download/super-linux-amd64.tar.gz
          tar -xzf super-linux-amd64.tar.gz
          sudo mv super-linux-amd64/super /usr/local/bin/
          sudo chmod +x /usr/local/bin/super

      - name: Validate implementation
        run: |
          echo "🧪 Validating Claude Code implementation..."
          
          # Check if core files exist
          echo "Checking core implementation files..."
          test -f src/mcp_server.py && echo "✅ MCP Server implemented" || echo "❌ MCP Server missing"
          test -f src/handler.py && echo "✅ Lambda Handler implemented" || echo "❌ Lambda Handler missing"
          test -f src/super_executor.py && echo "✅ Super Executor implemented" || echo "❌ Super Executor missing"
          test -f src/query_processor.py && echo "✅ Query Processor implemented" || echo "❌ Query Processor missing"
          test -f src/business_metrics.py && echo "✅ Business Metrics implemented" || echo "❌ Business Metrics missing"
          test -f template.yaml && echo "✅ SAM Template implemented" || echo "❌ SAM Template missing"
          
          # Run tests if they exist
          if [ -d "tests" ] && [ "$(ls -A tests)" ]; then
            echo "Running tests..."
            python -m pytest tests/ -v --tb=short || echo "Some tests failed - this is expected during development"
          else
            echo "No tests found - Claude Code should implement comprehensive tests"
          fi
          
          # Validate Python syntax
          echo "Validating Python syntax..."
          find src -name "*.py" -exec python -m py_compile {} \; || echo "Syntax errors found - need fixes"
          
          echo "🎯 Validation complete!"

      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: ${{ github.event.inputs.target_branch }}
          base: main
          title: "🤖 Claude Code Implementation: S3 Super MCP Server"
          body: |
            ## Claude Code Implementation
            
            This PR contains the complete S3 Super MCP Server implementation built by Claude Code.
            
            ### Implementation Includes:
            - ✅ Complete MCP Server with 5 core tools
            - ✅ Super library integration for S3 data querying
            - ✅ Natural language to SuperSQL conversion
            - ✅ Business Intelligence metrics and templates
            - ✅ AWS Lambda deployment configuration
            - ✅ Comprehensive test suite
            
            ### Next Steps:
            1. Review implementation for completeness
            2. Test with real S3 data
            3. Deploy to AWS Lambda for testing
            4. Validate MCP protocol compliance
            
            Built with instruction: `${{ github.event.inputs.build_instruction }}`
          draft: false